stages:
  - build-deploy

Deploy:
  stage: build-deploy
  only:
    - main
  variables:
    VAR_DIRECTORY: "/home/apps/sajiin-v1/api-v1/www"
    VAR_GIT_URL: "gitlab.com/sajiin-v1/sajiin-api-v1.git"
    VAR_CLONE_KEY: "glpat-aKeCxuamaRx3v7yeHUsk"
    VAR_USER: "edith"
    VAR_IP: "174.138.18.90"
    VAR_FILE_ENV: $ENV
    VAR_FILE_HTACCESS: $FILE_HTACCESS

  before_script:
    - "which ssh-agent || ( apt-get install openssh-client )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $VAR_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - echo "$VAR_FILE_HTACCESS"

  script:
    - ssh $VAR_USER@$VAR_IP "git config --global safe.directory '*'"
    - ssh $VAR_USER@$VAR_IP "if [ ! -d $VAR_DIRECTORY/.git ]; then echo 'Project belum ditemukan di direktori $VAR_DIRECTORY' && cd $VAR_DIRECTORY && git clone https://oauth2:$VAR_CLONE_KEY@$VAR_GIT_URL .; fi"
    - ssh $VAR_USER@$VAR_IP "if [ -d $VAR_DIRECTORY/composer.lock ]; then rm composer.lock; fi"
    - ssh $VAR_USER@$VAR_IP "cd $VAR_DIRECTORY && git pull origin main && exit"
    - ssh $VAR_USER@$VAR_IP "if [ -d $VAR_DIRECTORY/.env ]; then rm .env; fi"
    - ssh $VAR_USER@$VAR_IP "cd $VAR_DIRECTORY && echo '$VAR_FILE_ENV' >> .env"
    - ssh $VAR_USER@$VAR_IP "if [ -d $VAR_DIRECTORY/.htaccess ]; then rm .htaccess; fi"
    - ssh $VAR_USER@$VAR_IP "cd $VAR_DIRECTORY && echo '$VAR_FILE_HTACCESS' >> .htaccess"
    - ssh $VAR_USER@$VAR_IP "docker exec api_sajiin_v1 composer install"
    - ssh $VAR_USER@$VAR_IP "docker exec api_sajiin_v1 composer update"
    - ssh $VAR_USER@$VAR_IP "docker exec api_sajiin_v1 composer dump-autoload"
    - ssh $VAR_USER@$VAR_IP "docker exec api_sajiin_v1 php artisan key:generate"
    - echo "SUCCESS DEPLOY!"